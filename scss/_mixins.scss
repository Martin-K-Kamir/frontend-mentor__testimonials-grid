@charset "UTF-8";
@use 'sass:color';
@use 'sass:string';
@use 'sass:meta';
@use 'sass:math';

@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == '.') {
      @if $character == '.' {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

@function clr-modifier($color-to-modify, $number-modifier: null) {
  // starting variables
  $clr-value: 0;
  $light-value: 0;

  // check if $color-to-modify param is not string
  @if (meta.type-of($color-to-modify) != 'string') {
    // if $color-to-modify is color type, set to $clr-value given color
    $clr-value: $color-to-modify;
  } @else {
    // if $color-to-modify is string type

    // 1. slice string into color name and number (both values are string type)
    $clr-string: string.slice($color-to-modify, 1, -5);
    $number-modifier: string.slice($color-to-modify, -3);

    // 2. check color name with global variables colors
    @each $key, $value in $map-for-colors {
      @if ($clr-string == $key) {
        $clr-value: $value;
      }
    }
  }

  // slice first and second digit of the number
  $first-light-value: string.slice(#{$number-modifier}, 1, 1);
  $second-light-value: string.slice(#{$number-modifier}, 2, 2);

  // check if second digit is not 0
  @if ($second-light-value != 0) {
    // 1. merge first digit with second digi and convert it into number type
    $merge: to-number($first-light-value + $second-light-value);

    // 2. devide integer so there is decimal point and set that value to $light-value
    $light-value: math.div($merge, 10);
  }

  // slice last digit of the number and convert it into number type
  $opacity-value: to-number(string.slice(#{$number-modifier}, 3, 3));

  // check if $opacity-value is not 0
  @if $opacity-value == 0 {
    // if so set $opacity-value to 1 so there is no opacity
    $opacity-value: 1;
  } @else {
    // else devide integer so there is decimal point and set that value to $opacity-value
    $opacity-value: math.div($opacity-value, 10);
  }

  // return changed/modified color by $clr-value, $light-value and $opacity-value;
  @return color.change($clr-value, $lightness: $light-value * 10%, $alpha: $opacity-value);
}

@function clr-opacity($clr-value, $opacity-value) {
  @return color.change($clr-value, $alpha: $opacity-value);
}

@mixin only($params...) {
  @if length($params) == 0 {
    @error "Please pass an argument. The argument must be either a negative or positive number or list of numbers. Or pass one of the following predefined string values: 'first', 'last', 'odd', 'even'.";
  } @else if length($params) == 1 {
    $value: nth($params, 1);
    @if type-of($value) == 'number' {
      @if $value < 0 {
        &:nth-last-of-type(#{$value * -1}) {
          @content;
        }
      } @else {
        &:nth-of-type(#{$value}) {
          @content;
        }
      }
    } @else if type-of($value) == 'string' {
      @if $value == 'odd' {
        &:nth-of-type(odd) {
          @content;
        }
      } @else if $value == 'even' {
        &:nth-of-type(even) {
          @content;
        }
      } @else if $value == 'first' {
        &:first-of-type {
          @content;
        }
      } @else if $value == 'last' {
        &:last-of-type {
          @content;
        }
      } @else {
        // For class, id or attribute selectors.
        &#{$value} {
          @content;
        }
      }
    }
  } @else if length($params) > 1 {
    $list: ();
    @for $i from 1 through length($params) {
      $list: append(
        $list,
        if(
          nth($params, $i) < 0,
          unquote('&:nth-last-of-type(#{nth($params, $i) * -1})'),
          unquote('&:nth-of-type(#{nth($params, $i)})')
        ),
        comma
      );
    }
    #{$list} {
      @content;
    }
  }
}

$browser-context: 16;

@function to-em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
   $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}


$map-for-breakpoints: (
  'xsmall': 0,
  'small': 576px,
  'medium': 768px,
  'large': 992px,
  'xlarge': 1200px,
) !default;


@mixin breakpoint($params...) {
  @if length($params) == 1 {
    $value: nth($params, 1);
    @if map-has-key($map-for-breakpoints, $value) {
      @media (width: map-get($map-for-breakpoints, $value)) {
        @content;
      }
    } @else {
      @media (width: $value) {
        @content;
      }
    }
  } @else if length($params) == 2 {
    @if not index("only" "min" "max" "between", nth($params, 1)) {
      $start: nth($params, 1);
      $end: nth($params, 2);
      @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {
        @content;
      }
    } @else {
      $mode: nth($params, 1);
      $value: nth($params, 2);
      @if $mode == "only" {
        @if map-has-key($map-for-breakpoints, $value) {
          @media (width: map-get($map-for-breakpoints, $value)) {
            @content;
          }
        } @else {
          @media (width: $value) {
            @content;
          }
        }
      } @else if $mode == "min" {
        @if map-has-key($map-for-breakpoints, $value) {
          @media (min-width: map-get($map-for-breakpoints, $value)) {
            @content;
          }
        } @else {
          @media (min-width: $value) {
            @content;
          }
        }
      } @else if $mode == "max" {
        @if map-has-key($map-for-breakpoints, $value) {
          @media (max-width: map-get($map-for-breakpoints, $value)) {
            @content;
          }
        } @else {
          @media (max-width: $value) {
            @content;
          }
        }
      } @else if $mode == "between" {
        $start: nth($value, 1);
        $end: nth($value, 2);
        @media (min-width: #{__validateBreakpoint($start)}) and (max-width: #{if(map-has-key($map-for-breakpoints, $end), __validateBreakpoint($end) - 1, $end)}) {
          @content;
        }
      }
    }
  }
}